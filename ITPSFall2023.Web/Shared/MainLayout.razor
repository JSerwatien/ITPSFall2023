@inherits LayoutComponentBase
@inject NavigationManager NavManager
@inject Radzen.DialogService dialogService
@inject Radzen.NotificationService notificationService
@inject IJSRuntime JsRuntime
@using ITPSFall2023.Data.Code
<PageTitle>ITPSFall2023.Web</PageTitle>

<div class="page">
    <Radzen.Blazor.RadzenDialog />
    <RadzenNotification />
    <div class="sidebar" data-color="orange">
        <!--
            Tip 1: You can change the color of the sidebar using: data-color="blue | green | orange | red | yellow"
        -->
        <div class="logo">
            <a href="/" class="simple-text logo-mini">
                <b>ITPS</b>
            </a>
        </div>
        <div class="sidebar-wrapper" id="sidebar-wrapper">
            @if (AppState.CurrentUser != null && AppState.CurrentUser.UserProfileKey > 0)
            {
                <ul class="nav">
                    <li class="@GetLinkActiveClass("/index")">
                        <a href="/">
                            <i class="now-ui-icons design_app"></i>
                            <p>Home</p>
                        </a>
                    </li>
                    <li class="@GetLinkActiveClass("/ticket/")">
                        <a href="/Ticket/0">
                            <i class="now-ui-icons ui-1_simple-add"></i>
                            <p>Add New Ticket</p>
                        </a>
                    </li>
                    <li class="@GetLinkActiveClass("/SendNotification")">
                        <a href="/SendNotification">
                            <i class="now-ui-icons ui-1_send"></i>
                            <p>Send Notification</p>
                        </a>
                    </li>
                    <li class="@GetLinkActiveClass("/Notifications")">
                        <a href="/Notifications">
                            <i class="now-ui-icons ui-1_email-85"></i>
                            <p>View Notifications</p>
                        </a>
                    </li>
                    <li class="@GetLinkActiveClass("/TicketCalendar")">
                        <a href="/TicketCalendar">
                            <i class="now-ui-icons ui-1_calendar-60"></i>
                            <p>Ticket Calendar</p>
                        </a>
                    </li>
                    <li class="@GetLinkActiveClass("/OverviewReport")">
                        <a href="/OverviewReport">
                            <i class="now-ui-icons education_paper"></i>
                            <p>Overview Report</p>
                        </a>
                    </li>
                    <li class="@GetLinkActiveClass("/Priorities")">
                        <a href="./priorities.html">
                            <i class="now-ui-icons ui-2_time-alarm"></i>
                            <p>Priorities</p>
                        </a>
                    </li>
                    <li class="active-pro">
                        <a href="JavaScript: void(0);" onclick="@LogOut">
                            <i class="now-ui-icons arrows-1_cloud-download-93"></i>
                            <p>Log Out</p>
                        </a>
                    </li>
                </ul>
            }
        </div>
    </div>

    <main>
        <div class="main-panel" id="main-panel">
            <!-- Navbar -->
            @if (AppState.CurrentUser != null && AppState.CurrentUser.UserProfileKey > 0)
            {
                <nav class="navbar navbar-expand-lg navbar-transparent  bg-primary  navbar-absolute">
                    <div class="container-fluid">
                        <div class="navbar-wrapper">
                            <div class="navbar-toggle">
                                <button type="button" class="navbar-toggler">
                                    <span class="navbar-toggler-bar bar1"></span>
                                    <span class="navbar-toggler-bar bar2"></span>
                                    <span class="navbar-toggler-bar bar3"></span>
                                </button>
                            </div>
                            <a class="navbar-brand" href="#pablo">
                                @if (AppState.CurrentUser != null)
                                {
                                    <h3>Welcome back, @AppState.CurrentUser.DisplayName</h3>
                                }
                            </a>
                        </div>
                        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navigation" aria-controls="navigation-index" aria-expanded="false" aria-label="Toggle navigation">
                            <span class="navbar-toggler-bar navbar-kebab"></span>
                            <span class="navbar-toggler-bar navbar-kebab"></span>
                            <span class="navbar-toggler-bar navbar-kebab"></span>
                        </button>
                        <div class="collapse navbar-collapse justify-content-end" id="navigation">
                            <form>
                                <div class="input-group no-border">
                                    <input type="text" value="" class="form-control" placeholder="Search By Ticket ID...">
                                    <div class="input-group-append">
                                        <div class="input-group-text">
                                            <i class="now-ui-icons ui-1_zoom-bold"></i>
                                        </div>
                                    </div>
                                </div>
                            </form>
                            <ul class="navbar-nav">

                                <li class="nav-item dropdown">
                                    <a class="nav-link dropdown-toggle" id="navbarDropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        <i class="now-ui-icons location_world"></i>
                                        <p>
                                            <span class="d-lg-none d-md-block">Some Actions</span>
                                        </p>
                                    </a>
                                    <div class="dropdown-menu dropdown-menu-right" aria-labelledby="navbarDropdownMenuLink">
                                        <a class="dropdown-item" href="#">Messages <span class="badge badge-pill badge-success">@AppState.CurrentUser.NotificationList.Where(x => x.NotificationTypeCode=="MESSG").Count()</span></a>
                                        <a class="dropdown-item" href="#">Alerts <span class="badge badge-pill badge-success">@AppState.CurrentUser.NotificationList.Where(x => x.NotificationTypeCode=="ALERT").Count()</span></a>
                                        <a class="dropdown-item" href="/Notifications">View All Notifications</a>
                                    </div>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" href="#pablo">
                                        <i class="now-ui-icons users_single-02"></i>
                                        <p>
                                            <span class="d-lg-none d-md-block">Account</span>
                                        </p>
                                    </a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </nav>
            }
            <!-- End Navbar -->
            <div class="panel-header panel-header-lg">
                <canvas id="bigDashboardChart"></canvas>
            </div>
            <div class="content">
                @if (AppState.CurrentUser != null && AppState.CurrentUser.UserProfileKey > 0)
                {
                    <CascadingValue Value="this.AppState">
                         @Body
                    </CascadingValue>
                }
            </div>
            <footer class="footer">
                <div class=" container-fluid ">
                    <nav>

                    </nav>
                    <div class="copyright" id="copyright">
                        &copy; Designed by <a href="#" target="_blank">The IT Department</a>. Coded by <a href="#" target="_blank">Us (The IT Department)</a>.
                    </div>
                </div>
            </footer>
        </div>
    </main>
</div>
@code {
        [CascadingParameter]
        public CascadingAppState AppState { get; set; }
    private string JumpToTicketKey = string.Empty;
    private string searchMessage;
    private string PageMessage = string.Empty;
    private System.Timers.Timer theTimer = new(300000);
    private const string UserCookieName = "CurrentUserInformation";
    private ErrorBoundary? TheErrorBoundry;
    private bool HideErrorPopup = false;
    protected override void OnInitialized()
    {
        if (AppState.CurrentUser == null && !NavManager.Uri.ToUpper().Contains("/LOGIN"))
        {
            //NavManager.NavigateTo("/Login");
        }
        dialogService.OnClose += ReloadPage;
        theTimer.Elapsed += (sender, eventsArgs) => OnTimerCallBack();
        theTimer.Start();
    }
    protected override void OnParametersSet()
    {
        TheErrorBoundry?.Recover();
    }
    private bool ShowCloseableFromOverlayDialog(Exception ex)
    {
        if (!HideErrorPopup)
        {
            dialogService.Alert("A general error has occurred: " + ex.Message, "Unexpected Error", new AlertOptions() { OkButtonText = "OK", CloseDialogOnEsc = true, ShowClose = true, Draggable = true });
            HideErrorPopup = true;
        }
        return true;
    }
    private void OnTimerCallBack()
    {
        RefreshUserData();
    }
    private async Task RefreshUserData()
    {
        string userName = AppState?.CurrentUser?.UserName;
        string password = AppState?.CurrentUser?.Password;
        await InvokeAsync(() =>
        {
            AppState.SetProperty(this, "CurrentUser", ITPSFall2023.Data.Code.UserFactory.GetUserInformation(userName, password));
            StateHasChanged();
        });

    }
    public void ReloadPage(dynamic theResult)
    {
        StateHasChanged();
    }
    private void SearchForTicket()
    {
        searchMessage = string.Empty;
        if (ITPSFall2023.Data.Code.LocalFunctions.IsNumeric(JumpToTicketKey))
        { NavManager.NavigateTo("/ticket/" + JumpToTicketKey); }
        else
        {
            List<int> TicketArray = new List<int>();
            string description = JumpToTicketKey;
            TicketArray = ITPSFall2023.Data.Code.TicketFactory.GetTicketByDescription(description, AppState.CurrentUser);
            if (TicketArray.Count() > 1)
            {
                searchMessage = "<b>There were too many tickets found. Please refine your search.</b>";
            }
            else if (TicketArray.Count() == 1)
            {
                NavManager.NavigateTo("/ticket/" + TicketArray[0]);
            }
            else
            {
                searchMessage = "Sorry no items matched your search.";
            }
        }
    }
    private void GetQuote()
    {
        Random theRandom = new Random();
        int randomNumber = theRandom.Next(1, 3);
        if (randomNumber == 1)
        { PageMessage = QuoteFactory.GetRandomQuote(); }
        else
        { PageMessage = QuoteFactory.GetRandomJoke(); }
    }
    private void UpdateNotificationToRead(NotificationEntity theNotification)
    {
        try
        {
            if (theNotification.ReadDateTime == DateTime.MinValue)
            {
                NotificationFactory.UpdateNotificationToRead(theNotification, AppState.CurrentUser);
                RefreshUserData();
            }
        }
        catch (Exception ex)
        {

        }
    }
    private async void LogOut()
    {
        await JsRuntime.InvokeAsync<string>("Cookies.deleteCookie", UserCookieName);
    }
    private string GetLinkActiveClass(string pageIndicator)
    {
        if(NavManager.Uri.ToString().ToUpper().Contains(pageIndicator.ToUpper()))
        { return "active "; }
        else if (pageIndicator.ToUpper() == "/INDEX" && NavManager.Uri.ToString().ToUpper().EndsWith("/"))
        { return "active "; }
        else
        { return string.Empty; }
    }
}
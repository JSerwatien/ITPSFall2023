@page "/TicketCalendar"
@inject Radzen.DialogService dialogService
@inject NavigationManager NavManager
@using Radzen
@using ITPSFall2023.Data.Code
@using ITPSFall2023.Entity
@using System.Data;
<div class="container-fluid" style="width:1500px !important">
    <br />
    <br />

    @if (!string.IsNullOrEmpty(PageMessage))
    {
        <div class="alert alert-success" role="alert">
            @PageMessage
        </div>
    }
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @ErrorMessage
        </div>
    }
    <RadzenScheduler @ref=@PageModel SlotRender=@OnSlotRender style="height: 768px;" TItem="Radzen.Blazor.AppointmentData" Data=@AppointmentList StartProperty="Start" EndProperty="End"
                     TextProperty="Text" SelectedIndex="2" AppointmentSelect=@OnAppointmentSelect AppointmentRender="OnAppointmentRender">
        <RadzenDayView />
        <RadzenWeekView />
        <RadzenMonthView />
        <RadzenYearView />
    </RadzenScheduler>
</div>
@code {
    [CascadingParameter]
    public CascadingAppState AppState { get; set; }
    private RadzenScheduler<Radzen.Blazor.AppointmentData> PageModel = new();
    private string PageMessage = string.Empty;
    private string ErrorMessage = string.Empty;
    private IList<Radzen.Blazor.AppointmentData> AppointmentList = new List<Radzen.Blazor.AppointmentData>();
    private List<TicketEntity> TicketList = new();
    protected override void OnInitialized()
    {
        ReloadModel();
    }
    private void ReloadModel()
    {
        try
        {
            TicketList = TicketFactory.GetScheduleData(AppState.CurrentUser);
            AppointmentList = new List<Radzen.Blazor.AppointmentData>();
            foreach (TicketEntity newItem in TicketList)
            {
                AppointmentList.Add(new AppointmentData { Data = newItem.TicketKey, Start = Convert.ToDateTime(newItem.DueDate.ToString("yyyy-MM-dd 00:00:00")), End = Convert.ToDateTime(newItem.DueDate.AddDays(3).ToString("yyyy-MM-dd 23:59:59")), Text = newItem.ShortDescription });
            }
        }

        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight today in month view
        if (args.View.Text == "Month" &&   args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: green;";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }




    }
    private void OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<AppointmentData> args)
    {
        NavManager.NavigateTo("/Ticket/" + args.Data.Data);
    }
    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<AppointmentData> args)
    {

        if (args.Data.Start.Date < DateTime.Now.Date )
        {
            args.Attributes["style"] = "background: red; font-weight: bold";
        }
        else if(args.Data.Start.Date > DateTime.Now.Date && args.Data.Start.Date < DateTime.Now.Date.AddDays(5))
        {
            args.Attributes["style"] = "background: yellow; color: black; font-weight: bold";

        }
        else
        {
            args.Attributes["style"] = "font-weight: bold";
        }


    }
}

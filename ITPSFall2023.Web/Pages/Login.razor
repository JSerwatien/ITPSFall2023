@page "/login"
@inject NavigationManager NavManager
@inject Radzen.NotificationService notificationService
@inject DialogService DialogService
@inject ITPSFall2023.Data.ICookieFactory cookieFactory;
@inject IJSRuntime JsRuntime;
<div class="container">
    @if (!string.IsNullOrEmpty(AppState.CurrentUser?.ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @((MarkupString)AppState.CurrentUser?.ErrorMessage)
        </div>
    }
    <!-- Outer Row -->
    <div class="row justify-content-center">
        <div class="col-xl-10 col-lg-12 col-md-9">
        <Radzen.Blazor.RadzenDialog/>
        <radzen.Blazor.Radzen.Blazor.RadzenNotification/>
            <div class="card o-hidden border-0 shadow-lg my-5">
                <div class="card-body p-0">

                    <!-- Nested Row within Card Body -->
                    <div class="row">
                        <div class="col-lg-6 d-none d-lg-block">
                            <img src="/img/login.png" />
                        </div>
                        <div class="col-lg-6">
                            <div class="p-5">
                                <div class="text-center">
                                    <h1 class="h4 text-gray-900 mb-4">Welcome Back!</h1>
                                </div>
                                <form class="user">
                                    <div class="form-group">
                                        <Radzen.Blazor.RadzenTextBox type="email" class="form-control form-control-user" placeholder="Enter Email Address..." @bind-Value="@UserName" />
                                    </div>
                                    <div class="form-group">
                                        <Radzen.Blazor.RadzenTextBox type="password" class="form-control form-control-user" placeholder="Enter Password..." @bind-Value="@Password" />
                                    </div>
                                    <center>
                                        <Radzen.Blazor.RadzenButton Icon="person" Text="Login" Click="@LogUserIn" />
                                        <br />
                                        <a href="JavaScript: void(0)" onclick="@PopForgotPassword">Forgot Password?</a> 
                                        <br />
                                        <RadzenCheckBox @bind-Value="RememberMe"/>Remember Me?
                                    </center>
                                    <hr>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

@code {
    [CascadingParameter]
    public CascadingAppState AppState { get; set; }
    string UserName = string.Empty;
    string Password = string.Empty;
    private const string UserCookieName = "CurrentUserInformation";
    private string CookieValue = string.Empty;
    bool RememberMe = false;
    protected override void OnInitialized()
    {
        AppState.SetProperty(this,"CurrentUser", new ITPSFall2023.Entity.UserEntity());
        
    }
    private async void TryAutoLogin()
    {
         try
        {
            CookieValue = await JsRuntime.InvokeAsync<string>("ReadCookie.ReadCookie", UserCookieName);

            //cookieValue = ITPS.Data.Code.EncryptionFactory.EncryptString("joshs|joshs");
            if(!string.IsNullOrEmpty(CookieValue))
            {
                CookieValue = ITPSFall2023.Data.Code.EncryptionFactory.DecryptString(CookieValue);
                if (!string.IsNullOrEmpty(CookieValue))
                {
                    var userArray = CookieValue.Split("|");
                    UserName = userArray[0].ToString();
                    Password = userArray[1].ToString();
                    RememberMe = true;
                    LogUserIn();
                }
            }
        }
        catch (Exception ex)
        {
            AppState.CurrentUser.ErrorMessage = ex.Message;
        }
    }
    private async void ReadCookie(string cookieName)
    {
        CookieValue= await JsRuntime.InvokeAsync<string>("ReadCookie.ReadCookie", cookieName);
        //var returnValue= await cookieFactory.ReadCookie(cookieName);
        //return returnValue;
    }
    private async void SaveCookie()
    {
        string cookieValue = AppState.CurrentUser.UserName + "|" + AppState.CurrentUser.Password;
        cookieValue = ITPSFall2023.Data.Code.EncryptionFactory.EncryptString(cookieValue);
        await cookieFactory.WriteCookie(UserCookieName, cookieValue, "15");
    }
    private void LogUserIn()
    {
        AppState.SetProperty(this, "CurrentUser", ITPSFall2023.Data.Code.UserFactory.GetUserInformation(UserName, Password));
        RefreshMainLayout();
        if (string.IsNullOrEmpty(AppState.CurrentUser.ErrorMessage))
        { 
            if(RememberMe){ SaveCookie(); }
            NavManager.NavigateTo("/"); 
        }
        else
        { notificationService.Notify(Radzen.NotificationSeverity.Error, "Error Logging In", AppState.CurrentUser.ErrorMessage, 3000); }
    }
    private async void RefreshMainLayout()
    {
        await InvokeAsync(StateHasChanged);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        {
            TryAutoLogin();
        }
    }
    private void PopForgotPassword()
    {
        //DialogService.Open<Pages.Popups.ForgotPassword>("Forgot Password", null,new DialogOptions() { Width = "800px", Height = "600px", Resizable = true, Draggable = true });
    }
}

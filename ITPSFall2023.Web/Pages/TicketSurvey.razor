@page "/TicketSurvey"
@page "/TicketSurvey/{TicketKey}"
@inject Radzen.DialogService dialogService
@using Radzen
@inject IJSRuntime JsRuntime;
@using ITPSFall2023.Entity
@using ITPSFall2023.Data.Code
<div class="container-fluid" style="width:1500px !important">
    <br />
    <br />
    @if (!string.IsNullOrEmpty(PageModel?.PageMessage))
    {
        <div class="alert alert-success" role="alert">
            @PageModel.PageMessage
        </div>
    }
    @if (PageModel?.ErrorObject != null)
    {
        <div class="alert alert-danger" role="alert">
            @PageModel.ErrorObject.Message
        </div>
    }
    @if (PageModel != null && PageModel.TicketKey > 0)
    {
        <h1>Ticket ID: <a href="/ticket/@TicketKey">@TicketKey</a></h1>
        <h3>@PageModel.ShortDescription</h3>
        <h4>@PageModel.LongDescription</h4>
        @foreach(TicketSurveyItemEntity newItem in PageModel.TicketSurvey.SurveyItems)
        {
            <div class="row">
                <div class="col-md-4">
                    <b>@newItem.SurveyQuestion</b>
                </div>
                <div class="col-md-4">
                    <RadzenRating @bind-Value=newItem.SurveyRating/>
                </div>
                <div class="col-md-4">
                    <RadzenTextBox Placeholder="Optional Comments..." @bind-Value=newItem.Comments class="form-control" />
                </div>
            </div>
        }
            <RadzenButton Text="Save" Icon="save" ButtonStyle="ButtonStyle.Success" Style="float:right" Click="() => SaveSurvey()"></RadzenButton>
    }
</div>
@code {
    [Parameter]
    public string TicketKey { get; set; }
    [CascadingParameter]
    public CascadingAppState AppState { get; set; }
    private TicketEntity PageModel = new();
    protected override void OnInitialized()
    {
        //TryAutoLogin();
        ValidateTicketKey();
        if (PageModel.ErrorObject == null && AppState.CurrentUser!=null)
        { ReloadModel(); }
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        ReloadModel();
    }
    private void ReloadModel()
    {
        PageModel = ITPSFall2023.Data.Code.TicketFactory.LoadTicket(Convert.ToInt32(TicketKey), AppState.CurrentUser);
        StateHasChanged();
    }
    private void ValidateTicketKey()
    {
        if (string.IsNullOrEmpty(TicketKey))
        { PageModel.ErrorObject = new("The Ticket Key was missing"); }
        else if (!ITPSFall2023.Data.Code.LocalFunctions.IsNumeric(TicketKey))
        { PageModel.ErrorObject = new("The Ticket Key " + ValidateTicketKey + " is invalid"); }
    }
    private void SaveSurvey()
    {
        PageModel = ITPSFall2023.Data.Code.TicketFactory.SaveSurveyItems(PageModel, AppState.CurrentUser);
    }
    //private async void TryAutoLogin()
    //{
    //    try
    //    {
    //        if (!string.IsNullOrEmpty(AppState.UserName))
    //        {
    //            AppState.SetProperty(this, "CurrentUser", ITPSFall2023.Data.Code.UserFactory.GetUserInformation(AppState.UserName,AppState.PassWord));
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        AppState.CurrentUser.ErrorMessage = ex.Message;
    //    }
    //}
    //protected override void OnAfterRender(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        if (AppState.CurrentUser == null) { TryAutoLogin(); ReloadModel(); }
    //    }
    //}

}

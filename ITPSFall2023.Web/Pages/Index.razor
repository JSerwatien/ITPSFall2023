@page "/"
@page "/index"
@inject IJSRuntime JSRuntime
@using ITPSFall2023.Entity
@inject Radzen.DialogService dialogService

<div class="row">
    <div class="col-lg-4">
        <div class="card card-chart">
            <div class="card-header">
                <h5 class="card-category">Past Due Tickets</h5>
                <RadzenChart>
                    <RadzenDonutSeries Data="@PageModel.PastDueCountListByDepartment.ToList()" CategoryProperty="StringValue" ValueProperty="IntValue">
                        <ChildContent>
                            <RadzenSeriesDataLabels Visible="true" />
                        </ChildContent>
                        <TitleTemplate>
                            <div class="rz-donut-content">
                                <div>Past Due</div>
                                <div>By Department</div>
                            </div>
                        </TitleTemplate>
                    </RadzenDonutSeries>
                </RadzenChart>
                <br />
            </div>

        </div>
    </div>
    <div class="col-lg-4 col-md-6">
        <div class="card card-chart">
            <div class="card-header">
                <h5 class="card-category">Global Statistics</h5>
                <h4 class="card-title">Company Stats</h4>
            </div>
            <div class="card-body" style="height:215px">
                @if(AppState.CurrentUser!=null)
                {
                    <ul>
                        <li class="list-group-item"><i class="now-ui-icons files_single-copy-04"></i> Total Company Tickets: @PageModel.TotalTicketCount</li>
                        <li class="list-group-item"><i class="now-ui-icons files_paper"></i> Total Open Tickets: @PageModel.TotalOpenTicketCount</li>
                        <li class="list-group-item"><i class="now-ui-icons files_box"></i> My Tickets: @PageModel.UserTicketCount</li>
                        <li class="list-group-item"><i class="now-ui-icons education_paper"></i> My Open Tickets: @PageModel.MyOpenTicketCount</li>
                        <li class="list-group-item"><i class="now-ui-icons shopping_box"></i> My Closed Tickets: @PageModel.MyClosedTicketCount</li>
                    </ul>
                }
            </div>
            <div class="card-footer">
                <div class="stats">
                 &nbsp;
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-4 col-md-6">
        <div class="card card-chart">
            <div class="card-header">
                <h5 class="card-category">Performance</h5>
                <h4 class="card-title">Company Tickets vs My Department</h4>
            </div>
            <div class="card-body">
                <div class="chart-area">
                    <div class="chart-area">
                        <canvas id="barChartSimpleGradientsNumbers"></canvas>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <div class="stats">
                    <i class="now-ui-icons ui-2_time-alarm"></i> Last 7 days
                </div>
            </div>
        </div>
    </div>
</div>
@if(PageModel!=null && PageModel.WaitingForUserTickets !=null)
{
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-category">Open Tickets</h5>
                    @if (AppState.CurrentUser != null && AppState.CurrentUser.DepartmentCode.ToUpper() == "IT")
                    {
                        <h4 class="card-title"> Tickets Assigned To Me</h4>
                    }
                    else
                    {
                        <h4 class="card-title"> Waiting For My Response</h4>
                    }
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table">
                            <thead class=" text-primary">
                            <th>
                                Ticket ID
                            </th>
                            <th>
                                Description
                            </th>
                            <th>
                                Due Date
                            </th>
                            <th>
                                Status
                            </th>
                            <th>
                                Assigned To
                            </th>
                            </thead>
                            <tbody>
                                @foreach (TicketEntity newTicket in GetOpenTicketData())
                                {
                                    <tr>
                                        <td>
                                            <a href="#">@newTicket.TicketKey</a>
                                        </td>
                                        <td>
                                            @newTicket.ShortDescription
                                        </td>
                                        <td>
                                            @newTicket.DueDate.ToString("yyyy-MM-dd")
                                        </td>
                                        <td>
                                            @newTicket.Status
                                        </td>
                                        <td>
                                            @newTicket.AssignedToDisplayName
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-category">Recent Tickets</h5>
                    <h4 class="card-title"> My Recent Tickets</h4>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table">
                            <thead class=" text-primary">
                            <th>
                                Ticket ID
                            </th>
                            <th>
                                Description
                            </th>
                            <th>
                                Due Date
                            </th>
                            <th>
                                Status
                            </th>
                            <th>
                                Assigned To
                            </th>
                            </thead>
                            <tbody>
                                @foreach (TicketEntity newTicket in PageModel.MostRecentTickets)
                                {
                                    <tr>
                                        <td>
                                            <a href="#">@newTicket.TicketKey</a>
                                        </td>
                                        <td>
                                            @newTicket.ShortDescription
                                        </td>
                                        <td>
                                            @newTicket.DueDate.ToString("yyyy-MM-dd")
                                        </td>
                                        <td>
                                            @newTicket.Status
                                        </td>
                                        <td>
                                            @newTicket.AssignedToDisplayName
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@if (PageModel != null)
{
    <h3>@PageModel.PageMessage</h3>
}
@code
{
    [CascadingParameter]
    public CascadingAppState AppState { get; set; }
    private UserEntity CurrentUser { get; set; }
    private FrontPageDataEntity PageModel { get; set; }

    protected override void OnInitialized()
    {
        //CurrentUser = new();
        //CurrentUser = ITPSFall2023.Data.Code.UserFactory.GetUserInformation("joshs", "joshs");
        //AppState.SetProperty(this, "CurrentUser", CurrentUser);
        if(AppState.CurrentUser!=null && AppState.CurrentUser.UserProfileKey>0)
        { PageModel = ITPSFall2023.Data.Code.FrontPageFactory.GetFrontPageData(AppState.CurrentUser); }

    }
    private void SetChartData()
    {
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        { LoadCharts(); }
    }
    private async void LoadCharts()
    {
        string monthString = string.Empty;
        string companyCount = string.Empty;
        string myDepartmentCount = string.Empty;
        string totalTicketCount = string.Empty;
        foreach (MonthEntity newItem in PageModel.MonthlyCount.Where(x => x.Count>0))
        {
            monthString += newItem.MonthName + "|";
            companyCount += newItem.Count + "|";
            var myItem = PageModel.DepartmentMonthlyCount.Where(x => x.MonthName == newItem.MonthName);
            myDepartmentCount += myItem.FirstOrDefault() == null ? "0|" : myItem.FirstOrDefault().Count.ToString() + "|";
        }
        foreach(MonthEntity newItem in PageModel.MonthlyCount)
        {
            totalTicketCount += newItem.Count + "|";
        }

        await JSRuntime.InvokeAsync<string>("demo.initDashboardPageCharts", monthString.Substring(0, monthString.Length - 1), companyCount.Substring(0, companyCount.Length - 1), myDepartmentCount.Substring(0, myDepartmentCount.Length - 1), totalTicketCount.Substring(0, totalTicketCount.Length - 1));
    }
    private List<TicketEntity> GetOpenTicketData()
    {
        if (AppState.CurrentUser.DepartmentCode.ToUpper() == "IT")
        { return PageModel.AssignedToMeTickets; }
        else
        { return PageModel.WaitingForUserTickets; }

    }
}